(()=>{let e=null,n=null,t={},o=location.href;const i={danger:{icon:chrome.runtime.getURL("icons/danger.png"),label:"撤退"},onMyWay:{icon:chrome.runtime.getURL("icons/onMyWay.png"),label:"話します"},question:{icon:chrome.runtime.getURL("icons/question.png"),label:"疑問"},assist:{icon:chrome.runtime.getURL("icons/assist.png"),label:"助けて"}},s={danger:{angle:-90,distance:70},onMyWay:{angle:0,distance:70},question:{angle:90,distance:70},assist:{angle:180,distance:70}};function r(){console.log("Content script: 初期化中 for URL:",o),chrome.runtime.sendMessage({action:"getAuthStatus"},(e=>{if(chrome.runtime.lastError)return chrome.runtime.lastError.message?.includes("Extension context invalidated")?console.warn("CS: Context invalidated before receiving initial auth status."):console.error("CS: Error sending getAuthStatus message:",chrome.runtime.lastError.message),void a(null);a(e)})),d(o)}function a(n){const t=n?.user;console.log("CS: Handling auth response. User:",t?t.email:"null");const i=e;e=t;const s=!!document.getElementById("ping-container");JSON.stringify(i)===JSON.stringify(e)&&s||d(o)}function d(t){console.log("CS: Handling URL update:",t);const o=t?t.match(/meet\.google\.com\/([a-z0-9\-]+)/i):null,r=o?o[1]:null;if(console.log(`CS: Current Meeting ID: ${n}, New Meeting ID: ${r}`),r!==n&&(console.log(`CS: Meeting ID changed from ${n} to ${r}`),c(),n=r),n&&e){e?n?(document.getElementById("ping-container")||function(){if(document.getElementById("ping-container"))return;console.log("CS: setupUI: Creating UI elements...");const e=document.createElement("div");e.id="ping-container";const t=document.createElement("button");t.id="ping-menu-button",t.innerHTML="<span>!</span>",t.title="ピンメニューを開く",t.addEventListener("click",m),e.appendChild(t);const o=document.createElement("div");o.id="ping-menu",o.classList.add("hidden");const r=document.createElement("div");r.id="ping-center";const a=document.createElement("img");a.src=chrome.runtime.getURL("icons/center-pin.png"),a.alt="PING",a.width=32,a.height=32,r.appendChild(a),o.appendChild(r),Object.keys(i).forEach((e=>{const t=i[e],r=s[e],a=document.createElement("div");a.className="ping-option",a.dataset.type=e,a.title=t.label;const d=document.createElement("div");d.className="ping-icon";const c=document.createElement("img");if(c.src=t.icon,c.alt=t.label,c.width=24,c.height=24,d.appendChild(c),a.appendChild(d),r){const e=r.angle*(Math.PI/180),n=Math.cos(e)*r.distance,t=Math.sin(e)*r.distance;a.style.position="absolute",a.style.top="50%",a.style.left="50%",a.style.transform=`translate(calc(-50% + ${n}px), calc(-50% + ${t}px))`}a.addEventListener("click",(i=>{i.stopPropagation(),o.classList.add("hidden"),chrome.runtime.sendMessage({action:"createPing",meetingId:n,pingType:e},(e=>{chrome.runtime.lastError?chrome.runtime.lastError.message?.includes("Extension context invalidated")?console.warn("CS: Context invalidated before receiving response for createPing."):(console.error("CS: Error sending createPing message:",chrome.runtime.lastError.message),p("エラー: ピンの作成依頼に失敗しました。",!0)):e?.success?p(`ピン「${t.label}」を作成しました`):(console.error("CS: Failed to create pin:",e?.error,"Code:",e?.code),p(`エラー: ピンを作成できませんでした (${e?.error||"不明なエラー"})`,!0))}))})),o.appendChild(a)})),e.appendChild(o);const d=document.createElement("div");d.id="pins-area",e.appendChild(d),document.body?(document.body.appendChild(e),document.removeEventListener("click",l),document.addEventListener("click",l),console.log("CS: ピンUIが body に追加されました")):console.error("CS: setupUI: document.body not found.")}(),p(`ピンシステム起動 (${e.displayName||e.email.split("@")[0]})`)):console.error("CS: startPingSystem: Meeting ID not found."):console.error("CS: startPingSystem: User not authenticated.");const t=document.getElementById("ping-login-prompt");t&&t.remove()}else n&&!e?(console.log("CS: User not logged in for meeting:",n),c(),function(){if(document.getElementById("ping-login-prompt"))return;if(!window.location.href.includes("meet.google.com/"))return;if(!document.body)return;console.log("CS: Showing login prompt.");const e=document.createElement("div");e.id="ping-login-prompt",e.innerHTML='ピン機能を使うにはログインが必要です。<button id="ping-login-button">ログイン</button>',document.body.appendChild(e);const n=document.getElementById("ping-login-button");n?n.onclick=t=>{t.stopPropagation(),n.disabled=!0,n.textContent="処理中...",chrome.runtime.sendMessage({action:"requestLogin"},(t=>{if(chrome.runtime.lastError)return chrome.runtime.lastError.message?.includes("Extension context invalidated")?console.warn("CS: Context invalidated before receiving response for requestLogin."):(console.error("CS: Login request error:",chrome.runtime.lastError.message),p("ログイン開始に失敗しました。",!0)),void(document.getElementById("ping-login-button")&&(n.disabled=!1,n.textContent="ログイン"));t?.started?(p("ログインプロセスを開始しました..."),document.getElementById("ping-login-prompt")&&e.remove()):(p(`ログインを開始できませんでした (${t?.error||"不明なエラー"})`,!0),document.getElementById("ping-login-button")&&(n.disabled=!1,n.textContent="ログイン"))}))}:console.error("CS: Could not find #ping-login-button in prompt.")}()):(c(),n=null)}function c(){document.removeEventListener("click",l);const e=document.getElementById("ping-container");e&&e.remove();const n=document.getElementById("ping-login-prompt");n&&n.remove();const o=document.getElementById("ping-message");o&&o.remove(),t={}}function l(e){const n=document.getElementById("ping-menu"),t=document.getElementById("ping-menu-button");n&&!n.classList.contains("hidden")&&(n.contains(e.target)||t&&t.contains(e.target)||n.classList.add("hidden"))}function m(e){e.stopPropagation();const n=document.getElementById("ping-menu");n&&n.classList.toggle("hidden")}function g(e,n=!0){const o=t[e],i=o?.element||document.getElementById(`pin-${e}`);if(i){const o=()=>{i.parentNode&&i.remove(),delete t[e]};n&&i.classList.contains("show")?(i.classList.remove("show"),i.classList.add("hide"),setTimeout(o,300)):o()}else delete t[e]}let u;function p(e,n=!1){let t=document.getElementById("ping-message");t||(t=function(){let e=document.getElementById("ping-message");return!e&&document.body&&(e=document.createElement("div"),e.id="ping-message",e.className="ping-message-area",document.body.appendChild(e)),e}()),t&&(u&&clearTimeout(u),t.textContent=e,t.className="ping-message-area",t.classList.add(n?"error":"success"),t.classList.add("show"),u=setTimeout((()=>{t.classList.remove("show")}),n?5e3:3e3))}chrome.runtime.onMessage.addListener(((s,r,c)=>{if(!chrome.runtime.lastError){switch(s.action){case"authStatusChanged":a(s),c({received:!0});break;case"pinAdded":s.data?.pinId&&s.data?.pin?function(o,s){const r=document.getElementById("pins-area");if(!r)return void console.warn("CS: #pins-area not found.");g(o,!1);const a=i[s.type]||{icon:"❓",label:"不明"},d=document.createElement("div");d.id=`pin-${o}`,d.className="pin",e&&s.createdBy?.uid===e.uid&&d.classList.add("my-pin"),d.dataset.createdBy=s.createdBy?.uid||"unknown";const c=document.createElement("div");c.className="pin-icon";const l=document.createElement("img");l.src=a.icon,l.alt=a.label,l.width=24,l.height=24,c.appendChild(l),d.appendChild(c);const m=document.createElement("div");m.className="pin-details";const u=document.createElement("div");u.className="pin-label",u.textContent=a.label,m.appendChild(u);const h=document.createElement("div");h.className="pin-user",h.textContent=s.createdBy?.displayName||s.createdBy?.email?.split("@")[0]||"不明",m.appendChild(h),d.appendChild(m),e&&s.createdBy?.uid===e.uid&&(d.title="クリックして削除",d.addEventListener("click",(()=>{console.log(`CS: Requesting removal of my pin ${o}`),d.classList.remove("show"),d.classList.add("hide"),chrome.runtime.sendMessage({action:"removePing",meetingId:n,pinId:o},(e=>{chrome.runtime.lastError?chrome.runtime.lastError.message?.includes("Extension context invalidated")?(console.warn("CS: Context invalidated before receiving response for removePing."),g(o,!1)):(console.error("CS: removePing message error:",chrome.runtime.lastError.message),p("エラー: ピンの削除に失敗しました。",!0),document.getElementById(`pin-${o}`)&&(d.classList.remove("hide"),d.classList.add("show"))):e?.success?setTimeout((()=>g(o,!1)),300):(console.error("CS: Failed to remove pin:",e?.error),p(`エラー: ピンを削除できませんでした (${e?.error||"不明なエラー"})`,!0),document.getElementById(`pin-${o}`)&&(d.classList.remove("hide"),d.classList.add("show")))}))}))),r.appendChild(d),requestAnimationFrame((()=>{d.classList.add("show")})),t[o]={element:d}}(s.data.pinId,s.data.pin):console.warn("CS: Invalid pinAdded data:",s.data),c({received:!0});break;case"pinRemoved":s.data?.pinId?g(s.data.pinId):console.warn("CS: Invalid pinRemoved data:",s.data),c({received:!0});break;case"permissionError":p("エラー: DBアクセス権限がありません。",!0),c({received:!0});break;case"urlUpdated":s.url&&s.url!==o?(o=s.url,d(o)):s.url!==o||document.getElementById("ping-container")||d(o),c({received:!0});break;default:c({received:!1,message:"Unknown action"})}return!0}})),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",r):r(),console.log("Meet Ping Extension content script loaded.")})();